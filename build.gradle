buildscript {
    repositories {
        jcenter()

    }
    dependencies {
        classpath 'com.bmuschko:gradle-clover-plugin:2.2.4'
    }
}


plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "java"
    id "groovy"
    id "jacoco"
    id "application"
    id "com.google.cloud.tools.jib" version "2.1.0" //Creating Docker Images
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "com.gorylenko.gradle-git-properties" version "2.0.0" //https://github.com/n0mer/gradle-git-properties
    id "com.dorongold.task-tree" version "1.3.1" //Print task deps: Usage: gradle <task1>...<taskN> taskTree
    id 'com.github.ben-manes.versions' version '0.21.0' //Find all dependency updates using task "dependencyUpdates"
    id "org.sonarqube" version "2.7"
    id "com.bmuschko.clover" version "2.2.4"
    id 'maven-publish'
}
apply plugin: 'com.bmuschko.clover'

String containerRegistryPath
String workingBranch

task('increaseVersionCode'){
    Properties props = new Properties()
    File propsFile = project.file('version.properties')
    props.load(propsFile.newDataInputStream())
    String major=props.getProperty('buildMajorVersion')
    String minor=props.getProperty('buildMinorVersion')
    String patch=props.getProperty('buildPatchVersion')

    //automated build version number if command line parameter is passed (e.g. -Pbuild-increment=true)
    if(project.properties['build-increment']=="true") {
        Integer nextbuildnum = (((props.getProperty('buildPatchVersion')) as BigDecimal) + 1)
        props.setProperty('buildPatchVersion', nextbuildnum.toString())
        props.store(propsFile.newWriter(), null)
        props.load(propsFile.newDataInputStream())
        patch=nextbuildnum
    }

    containerRegistryPath='docker.io/mangesh32/webhook-firestore-sink'

    workingBranch = project.properties['working-branch']
    if(workingBranch==null)
        workingBranch="local"

    //Default version can be overridden by passing build_number on command line (e.g. -Pbuild_number=120) OR
    //Update version.properties file with version which needs to be generated from build process
    String buildVersionNumber=major+'.'+minor+'.'+patch
    version = project.properties['build_number'] ? '0.0.' + project.properties['build_number']:buildVersionNumber
    println "build version = "+version
}

repositories {
    jcenter()
    mavenLocal()

    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven {
        url "https://dl.bintray.com/micronaut/core-releases-local"
    }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:2.5.1'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Api-Gateway of SonarQube Scanner'
        property "sonar.sourceEncoding", "UTF-8"
    }
}

group "sink"

dependencies {

    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"

    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")

    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-runtime:2.5.1"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "javax.annotation:javax.annotation-api"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    implementation group: 'org.codehaus.groovy', name: 'groovy-json', version: '3.0.8'


    //==== Micronaut Swagger/OpenAPI
    compileOnly "io.micronaut.configuration:micronaut-openapi"
    compile group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.1.2'
    
    //Firebase
    compile 'com.google.firebase:firebase-admin:7.2.0'

}
test.classpath += configurations.developmentOnly
clover {
    licenseLocation = File.createTempFile('clover', '.license').absolutePath
    testIncludes = ['**/*Spec.groovy']
    report {
        html = true
        xml = false
    }
}

shadowJar {
    mergeServiceFiles()
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "sink.Application"
tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}


// -------------------- Docker Image generation --------------------

jib {
    String buildDate = new Date().format("yyyyMMdd-HHmmssSSS").toString()
    println ("Branch inside of Jib is: " + workingBranch)
    from {
        image = 'gcr.io/distroless/java:11'
    }
    to {
        if (workingBranch != null) {
            workingBranch = workingBranch.replace("/", "-")
        }

        image = containerRegistryPath.toString()
        tags = [version.toString() + '-' + workingBranch.toString() + '-' + buildDate, 'latest']
    }
    container {
        jvmFlags = ['-Xms2048m', '-Xmx8192m', '-Xdebug']
        mainClass = 'tech.skylo.Application'
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}
tasks.build.dependsOn tasks.jib

//Increase Heap
tasks.withType(JavaExec) {
    jvmArgs = ['-Xms512m', '-Xmx8g']
}
// , '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,address=5005'


// --------------------  Git Commit Generatok
// ion --------------------
gitProperties {
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)
task printGitProperties(dependsOn: 'generateGitProperties') { // make sure generateGitProperties task to execute before accessing generated properties
    doLast {
        println "git.commit.id=" + project.ext.gitProps['git.commit.id']
        //println "git.commit.id.abbrev=" + project.ext.gitProps
    }
}
